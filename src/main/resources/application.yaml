spring:
  application:
    name: qbychat
  docker:
    compose:
      enabled: true
      file: compose.yml
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://root:password@localhost/qbychat?authSource=admin}
    redis:
      url: ${REDIS_URL:redis://127.0.0.1:6379/0}
  security:
    jwt:
      key: ${JWT_KEY:3cfa76ef14937c1c0ea519f8fc057a80fcd04a7420f8e8bcd0a7567c272e007b}
      expire: ${JWT_EXPIRE:3}
  rabbitmq:
    stream:
      host: ${RABBITMQ_HOST:localhost}
      port: ${RABBITMQ_STREAM_PORT:5552}
      username: ${RABBITMQ_USERNAME:admin}
      password: ${RABBITMQ_PASSWORD:password}
    #      virtual-host: ${RABBITMQ_VIRTUAL_HOST:qbychat}
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:admin}
    password: ${RABBITMQ_PASSWORD:password}
    #    virtual-host: ${RABBITMQ_VIRTUAL_HOST:qbychat}
    listener:
      simple:
        concurrency: ${RABBITMQ_CONCURRENCY:5}
        max-concurrency: ${RABBITMQ_MAX_CONCURRENCY:10}
        prefetch: ${RABBITMQ_PREFETCH:1}
        retry:
          enabled: ${RABBITMQ_RETRY_ENABLED:true}
          max-attempts: ${RABBITMQ_RETRY_MAX_ATTEMPTS:3}
          initial-interval: ${RABBITMQ_RETRY_INITIAL_INTERVAL:1000}
    publisher-confirm-type: ${RABBITMQ_PUBLISHER_CONFIRM_TYPE:correlated}
    publisher-returns: ${RABBITMQ_PUBLISHER_RETURNS:true}
    template:
      mandatory: ${RABBITMQ_TEMPLATE_MANDATORY:true}

instance:
  id: ${HOSTNAME:qbychat}

qbychat:
  federation:
    enabled: true
    domain: localhost
    allowInsecure: false
  websocket:
    path: /ws
    requireEncryption: true
